name: my awesome workflow
on: [push]

env:
  GKE_CLUSTER: ${{ secrets.GKE_PROJECT }}-gke
  GKE_REGION: "europe-north1"
  PROJECT_ID: ${{ secrets.PROJECT_ID }}

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docker
    steps:
      - name: check out the repo
        uses: actions/checkout@v2
        
      - name: set up qemu
        uses: docker/setup-qemu-action@v1
        
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v1
        
      - name: login to dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: crawler unit test
        run: |-
          cd search_engine_crawler
          pip3 install setuptools wheel
          pip3 install -r requirements.txt
          pip3 install -r requirements-test.txt
          python3 -m unittest discover -s tests/
          coverage run -m unittest discover -s tests/
          coverage report --include crawler/crawler.py
          
      - name: build and push crawler
        id: docker_build_crawler
        uses: docker/build-push-action@v2
        with:
          context: search_engine_crawler
          file: search_engine_crawler/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/search_engine_crawler

      - name: ui unit test
        run: |-
          cd search_engine_ui
          pip3 install setuptools wheel
          pip3 install -r requirements.txt
          pip3 install -r requirements-test.txt
          python3 -m unittest discover -s tests/
          coverage run -m unittest discover -s tests/
          coverage report --include ui/ui.py

      - name: build and push ui
        id: docker_build_ui
        uses: docker/build-push-action@v2
        with:
          context: search_engine_ui
          file: search_engine_ui/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/search_engine_ui

  create-cluster:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: check out the repo
        uses: actions/checkout@v2

      - name: setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: terraform init
        run: terraform init

      - name: terraform apply
        run: terraform apply -auto-approve=true

  deploy-application:
    needs: [build-and-push-images, create-cluster]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: kubernetes
    steps:
      - name: check out the repo
        uses: actions/checkout@v2
      
      - name: setup gcloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      - name: get creds
        run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_REGION" --project "$PROJECT_ID"

      - name: create namespaces
        run: |-
          kubectl apply -f namespace-prod.yml \
                        -f namespace-monitoring.yml

      - name: deploy infra
        run: |-
          kubectl apply -f deployment-rabbit.yml \
                        -f service-rabbit.yml \
                        -f deployment-mongo.yml \
                        -f service-mongo.yml

      - name: deploy app
        run: |-
          kubectl apply -f deployment-crawler.yml \
                        -f service-crawler.yml \
                        -f deployment-ui.yml \
                        -f service-ui.yml

      - name: setup helm
        uses: azure/setup-helm@v1
        id: install

      - name: install prometheus
        run: |-
          cd charts/prometheus
          helm upgrade --install prometheus . -f values.yaml -n prod

      - name: install grafana
        run: |-
          cd charts/grafana
          helm upgrade --install grafana . -f values.yaml -n monitoring
